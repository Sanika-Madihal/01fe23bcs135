#include <iostream>
#include <vector>
using namespace std;

struct Crop {
    string name;
    int demand;
};
bool operator>(const Crop& a, const Crop& b) {
    return a.demand > b.demand;
}
void heapify(vector<Crop>& heap, int n, int i) {
    int largest = i;          
    int left = 2 * i + 1;       
    int right = 2 * i + 2;   
    if (left < n && heap[left] > heap[largest]) {
        largest = left;
    }
    if (right < n && heap[right] > heap[largest]) {
        largest = right;
    }
    if (largest != i) {
        swap(heap[i], heap[largest]);
        heapify(heap, n, largest);  
    }
}
void heapSort(vector<Crop>& heap, int n) {
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(heap, n, i);
    }
    for (int i = n - 1; i > 0; i--) {
        swap(heap[0], heap[i]);
        heapify(heap, i, 0);
    }
}
void printArray(const vector<Crop>& heap) {
    for (const Crop& crop : heap) {
        cout << crop.name << " (Demand: " << crop.demand << ") ";
    }
    cout << endl;
}
int main() {
    vector<Crop> crops = {
        {"Rice", 15},
        {"Wheat", 20},
        {"Cotton", 10},
        {"Sugarcane", 25},
        {"Spices", 18},
        {"Vegetables", 12}
    };
    int n = crops.size();
    cout << "Unsorted crops based on demand: ";
    printArray(crops);
    heapSort(crops, n);
    cout << "Sorted crops based on demand: ";
    printArray(crops);
    return 0;
}
