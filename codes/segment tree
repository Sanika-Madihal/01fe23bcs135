#include <iostream>
#include <vector>
using namespace std;

class SegmentTree {
private:
    vector<int> tree;
    int n;
    void buildTree(const vector<int>& arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            buildTree(arr, 2 * node + 1, start, mid); 
            buildTree(arr, 2 * node + 2, mid + 1, end); 
            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
        }
    
    int query(int node, int start, int end, int L, int R) {
        if (R < start || end < L) {
            return 0; 
        }
        if (L <= start && end <= R) {
            return tree[node];
        }
        int mid = (start + end) / 2;
        int leftQuery = query(2 * node + 1, start, mid, L, R);
        int rightQuery = query(2 * node + 2, mid + 1, end, L, R); 
        return leftQuery + rightQuery;
    }
    void update(int node, int start, int end, int idx, int value) {
        if (start == end) {
            tree[node] = value;
        } else {
            int mid = (start + end) / 2;
            if (start <= idx && idx <= mid) {
                update(2 * node + 1, start, mid, idx, value);
            } else {
                update(2 * node + 2, mid + 1, end, idx, value);
            }
            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
        }
    }

public:
    SegmentTree(const vector<int>& arr) {
        n = arr.size();
        tree.resize(4 * n);
        buildTree(arr, 0, 0, n - 1); 
    }
    int query(int L, int R) {
        return query(0, 0, n - 1, L, R);
    }
    void update(int idx, int value) {
        update(0, 0, n - 1, idx, value);
    }
};
int main() {
    vector<int> waterResources = {100, 150, 200, 250, 300, 350};
    SegmentTree segmentTree(waterResources);
    cout << "Total water in range [1, 3]: " << segmentTree.query(1, 3) << endl; 
    cout << "Total water in range [0, 5]: " << segmentTree.query(0, 5) << endl; 
    segmentTree.update(2, 250);
    cout << "Total water in range [0, 5] after rainfall in region 2: " << segmentTree.query(0, 5) << endl; 
    return 0;
}

