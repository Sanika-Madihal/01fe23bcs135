#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Edge {
    int src, dest, weight;
};
struct Subset {
    int parent, rank;
};
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}
void unionSubsets(Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}
void kruskalMST(vector<Edge>& edges, int V) {
    sort(edges.begin(), edges.end(), [](Edge a, Edge b) {
        return a.weight < b.weight;
    });
    Subset* subsets = new Subset[V];
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }
    vector<Edge> result;
    for (const auto& edge : edges) {
        int x = find(subsets, edge.src);
        int y = find(subsets, edge.dest);

        if (x != y) {
            result.push_back(edge);
            unionSubsets(subsets, x, y);
        }
    }
    cout << "Edges in the Minimum Spanning Tree (Trade Network):" << endl;
    for (const auto& edge : result) {
        cout << "Route between Hub " << edge.src << " and Hub " << edge.dest << " with cost = " << edge.weight << endl;
    }
    delete[] subsets;
}
int main() {
    int V = 4;
    vector<Edge> edges = {
        {0, 1, 10}, 
        {1, 2, 15},
        {0, 3, 20}, 
        {2, 3, 25} 
    };
    kruskalMST(edges, V);

    return 0;
}
