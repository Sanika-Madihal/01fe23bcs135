#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <string>
using namespace std;

struct Edge {
    int v, weight; 
};

void Dijkstra(const vector<vector<Edge>>& adj, int V, int source) {
    vector<int> dist(V, INT_MAX); 
    vector<int> parent(V, -1);  
    dist[source] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, source});
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        for (const Edge& edge : adj[u]) {
            int v = edge.v;
            int weight = edge.weight;
            if (dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                parent[v] = u;
                pq.push({dist[v], v});
            }
        }
    }
    cout << "Shortest distances from source (" << source << "):" << endl;
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            cout << "Node " << i << ": INF" << endl;
        else
            cout << "Node " << i << ": " << dist[i] << endl;
    }
    cout << "\nShortest paths from source (" << source << "):" << endl;
    for (int i = 0; i < V; i++) {
        if (i == source) continue;
        if (dist[i] == INT_MAX) {
            cout << "Node " << i << ": No path\n";
        } else {
            vector<int> path;
            for (int v = i; v != -1; v = parent[v])
                path.push_back(v);
            reverse(path.begin(), path.end());

            cout << "Node " << i << ": ";
            for (int v : path)
                cout << v << " ";
            cout << endl;
        }
    }
}
int main() {
    int V = 6;
    vector<vector<Edge>> adj(V);
    adj[0].push_back({1, 4}); 
    adj[0].push_back({2, 8}); 
    adj[1].push_back({2, 2}); 
    adj[1].push_back({3, 5}); 
    adj[2].push_back({3, 7});
    adj[2].push_back({4, 4}); 
    adj[3].push_back({4, 3}); 
    adj[4].push_back({5, 6}); 
    adj[5].push_back({3, 6}); 
    int source = 0;
    Dijkstra(adj, V, source);
    return 0;
}
