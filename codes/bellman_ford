#include <iostream>
#include <vector>
#include <climits>
using namespace std;
struct Edge {
    int u, v, weight; 
};
void BellmanFord(const vector<Edge>& edges, int V, int E, int source) {
    vector<int> dist(V, INT_MAX); 
    dist[source] = 0; 
    for (int i = 1; i <= V - 1; i++) {
        for (int j = 0; j < E; j++) {
            int u = edges[j].u;
            int v = edges[j].v;
            int weight = edges[j].weight;
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;  
            }
        }
    }
    for (int j = 0; j < E; j++) {
        int u = edges[j].u;
        int v = edges[j].v;
        int weight = edges[j].weight;
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v]) {
            cout << "Graph contains a negative weight cycle" << endl;
            return;
        }
    }
    cout << "Vertex Distance from Source (" << source << "):" << endl;
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX)
            cout << "INF ";  
        else
            cout << dist[i] << " "; 
    }
    cout << endl;
}
int main() {
    int V = 5; 
    int E = 8;  
    vector<Edge> edges = {
        {0, 1, -1}, 
        {0, 2, 4},   
        {1, 2, 3},  
        {1, 3, 2},  
        {1, 4, 2}, 
        {2, 3, 5},   
        {3, 1, 1},  
        {3, 4, -3}  
    };
    int source = 0; 
    BellmanFord(edges, V, E, source);
    return 0;
}
